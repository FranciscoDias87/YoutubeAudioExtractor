#!/usr/bin/env python3
"""
Script para gerar execut√°vel do YouTube Audio Extractor para Windows
Autor: Manus AI
Vers√£o: 2.0
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def print_step(step_number, description):
    """Imprimir etapa do processo de build"""
    print(f"\n{'='*60}")
    print(f"ETAPA {step_number}: {description}")
    print(f"{'='*60}")

def run_command(command, description):
    """Executar comando e verificar resultado"""
    print(f"\nüîÑ {description}...")
    print(f"Comando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} conclu√≠do com sucesso!")
        if result.stdout:
            print(f"Sa√≠da: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro em {description}:")
        print(f"C√≥digo de sa√≠da: {e.returncode}")
        print(f"Erro: {e.stderr}")
        return False

def check_dependencies():
    """Verificar se todas as depend√™ncias est√£o instaladas"""
    print_step(1, "VERIFICANDO DEPEND√äNCIAS")
    
    dependencies = [
        ('PyInstaller', 'PyInstaller'),
        ('PyQt5', 'PyQt5'),
        ('yt_dlp', 'yt-dlp')
    ]
    
    missing_deps = []
    
    for module, name in dependencies:
        try:
            __import__(module)
            print(f"‚úÖ {name} est√° instalado")
        except ImportError:
            print(f"‚ùå {name} N√ÉO est√° instalado")
            missing_deps.append(name)
    
    if missing_deps:
        print(f"\n‚ö†Ô∏è  Depend√™ncias faltando: {', '.join(missing_deps)}")
        print("Execute: pip install pyinstaller PyQt5 yt-dlp")
        return False
    
    print("\n‚úÖ Todas as depend√™ncias est√£o instaladas!")
    return True

def clean_build_directories():
    """Limpar diret√≥rios de build anteriores"""
    print_step(2, "LIMPANDO DIRET√ìRIOS DE BUILD")
    
    directories_to_clean = ['build', 'dist', '__pycache__']
    
    for directory in directories_to_clean:
        if os.path.exists(directory):
            print(f"üóëÔ∏è  Removendo diret√≥rio: {directory}")
            shutil.rmtree(directory)
        else:
            print(f"üìÅ Diret√≥rio {directory} n√£o existe (OK)")
    
    print("\n‚úÖ Limpeza conclu√≠da!")

def verify_source_files():
    """Verificar se todos os arquivos fonte est√£o presentes"""
    print_step(3, "VERIFICANDO ARQUIVOS FONTE")
    
    required_files = [
        'app.py',
        'main_menu.py',
        'single_video_window.py',
        'playlist_window.py',
        'integrated_audio_extractor_playlist.py',
        'file_manager.py',
        'youtube_audio_extractor.spec'
    ]
    
    missing_files = []
    
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} N√ÉO ENCONTRADO")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è  Arquivos faltando: {', '.join(missing_files)}")
        return False
    
    print("\n‚úÖ Todos os arquivos fonte est√£o presentes!")
    return True

def build_executable():
    """Gerar o execut√°vel usando PyInstaller"""
    print_step(4, "GERANDO EXECUT√ÅVEL")
    
    # Comando PyInstaller
    command = "python.exe -m PyInstaller youtube_audio_extractor.spec --clean --noconfirm"
    
    success = run_command(command, "Gera√ß√£o do execut√°vel")
    
    if success:
        # Verificar se o execut√°vel foi criado
        exe_path = os.path.join('dist', 'YouTubeAudioExtractor.exe')
        if os.path.exists(exe_path):
            file_size = os.path.getsize(exe_path) / (1024 * 1024)  # MB
            print(f"\nüéâ Execut√°vel criado com sucesso!")
            print(f"üìç Localiza√ß√£o: {os.path.abspath(exe_path)}")
            print(f"üìè Tamanho: {file_size:.1f} MB")
            return True
        else:
            print(f"\n‚ùå Execut√°vel n√£o foi encontrado em {exe_path}")
            return False
    
    return False

def create_installer_info():
    """Criar arquivo de informa√ß√µes para instala√ß√£o"""
    print_step(5, "CRIANDO INFORMA√á√ïES DE INSTALA√á√ÉO")
    
    info_content = """# YouTube Audio Extractor - Informa√ß√µes de Instala√ß√£o

## Sobre o Software
- **Nome:** YouTube Audio Extractor
- **Vers√£o:** 2.0
- **Desenvolvido por:** Francisco Dias 
- **Descri√ß√£o:** Ferramenta para extrair √°udio de v√≠deos e playlists do YouTube

## Requisitos do Sistema
- **Sistema Operacional:** Windows 10 ou superior (64-bit)
- **Mem√≥ria RAM:** M√≠nimo 4 GB (recomendado 8 GB)
- **Espa√ßo em Disco:** M√≠nimo 500 MB livres
- **Conex√£o com Internet:** Necess√°ria para download de v√≠deos

## Instala√ß√£o
1. Baixe o arquivo `YouTubeAudioExtractor.exe`
2. Execute o arquivo como administrador (clique direito ‚Üí "Executar como administrador")
3. Se aparecer aviso do Windows Defender, clique em "Mais informa√ß√µes" ‚Üí "Executar assim mesmo"
4. O programa ser√° executado diretamente (n√£o requer instala√ß√£o)

## Primeiro Uso
1. Execute o `YouTubeAudioExtractor.exe`
2. Escolha entre "Baixar V√≠deo √önico" ou "Baixar Playlist"
3. Cole a URL do YouTube no campo apropriado
4. Configure formato e qualidade desejados
5. Clique em "Baixar" e aguarde o processo

## Funcionalidades
- ‚úÖ Download de v√≠deos √∫nicos do YouTube
- ‚úÖ Download de playlists completas
- ‚úÖ M√∫ltiplos formatos de √°udio (MP3, AAC, WAV, FLAC, M4A)
- ‚úÖ Qualidade configur√°vel (64K a 320K)
- ‚úÖ Nomenclatura inteligente "Artista - M√∫sica"
- ‚úÖ Organiza√ß√£o autom√°tica em pastas
- ‚úÖ Interface gr√°fica intuitiva

## Solu√ß√£o de Problemas

### Erro "Windows protegeu seu PC"
- Clique em "Mais informa√ß√µes"
- Clique em "Executar assim mesmo"
- Isso acontece porque o execut√°vel n√£o tem assinatura digital

### Erro de download "Sign in to confirm you're not a bot"
- Este erro ocorre quando o YouTube detecta muitas requisi√ß√µes
- Aguarde alguns minutos e tente novamente
- Use uma VPN se o problema persistir

### Erro "FFmpeg n√£o encontrado"
- O FFmpeg est√° inclu√≠do no execut√°vel
- Se o erro persistir, reinicie o programa

### Programa n√£o abre
- Execute como administrador
- Verifique se o antiv√≠rus n√£o est√° bloqueando
- Verifique se tem espa√ßo suficiente em disco

## Suporte
Para suporte t√©cnico ou reportar bugs:
- Email: support@manus.ai
- Website: https://manus.ai

## Licen√ßa
Este software √© fornecido "como est√°" para uso pessoal.
Respeite os termos de uso do YouTube e leis de direitos autorais locais.

---
Gerado automaticamente pelo script de build
Data: {datetime}
"""
    
    try:
        from datetime import datetime
        now_str = datetime.now().strftime('%d/%m/%Y %H:%M:%S')
        with open('dist/LEIA-ME.txt', 'w', encoding='utf-8') as f:
            f.write(info_content.format(datetime=now_str))
        print("‚úÖ Arquivo LEIA-ME.txt criado em dist/")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo de informa√ß√µes: {e}")
        return False

def create_batch_launcher():
    """Criar arquivo batch para facilitar execu√ß√£o"""
    print_step(6, "CRIANDO LAUNCHER BATCH")
    
    batch_content = """@echo off
title YouTube Audio Extractor
echo.
echo ========================================
echo  YouTube Audio Extractor v2.0
echo  Desenvolvido por Francisco Dias
echo ========================================
echo.
echo Iniciando aplicacao...
echo.

REM Verificar se o executavel existe
if not exist "YouTubeAudioExtractor.exe" (
    echo ERRO: YouTubeAudioExtractor.exe nao encontrado!
    echo Certifique-se de que este arquivo .bat esta na mesma pasta do executavel.
    pause
    exit /b 1
)

REM Executar o programa
start "" "YouTubeAudioExtractor.exe"

REM Aguardar um pouco para verificar se iniciou
timeout /t 2 /nobreak >nul

echo.
echo Aplicacao iniciada com sucesso!
echo Voce pode fechar esta janela.
echo.
pause
"""
    
    try:
        with open('dist/Executar_YouTube_Audio_Extractor.bat', 'w', encoding='utf-8') as f:
            f.write(batch_content)
        print("‚úÖ Arquivo batch criado em dist/")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar arquivo batch: {e}")
        return False

def show_final_summary():
    """Mostrar resumo final do build"""
    print_step(7, "RESUMO FINAL")
    
    print("üéâ BUILD CONCLU√çDO COM SUCESSO!")
    print("\nüìÅ Arquivos gerados na pasta 'dist/':")
    
    dist_path = Path('dist')
    if dist_path.exists():
        for file in dist_path.iterdir():
            if file.is_file():
                size = file.stat().st_size / (1024 * 1024)  # MB
                print(f"   üìÑ {file.name} ({size:.1f} MB)")
    
    print(f"\nüìç Localiza√ß√£o completa: {os.path.abspath('dist')}")
    
    print("\nüöÄ PR√ìXIMOS PASSOS:")
    print("1. Teste o execut√°vel em uma m√°quina Windows")
    print("2. Verifique se todas as funcionalidades est√£o funcionando")
    print("3. Distribua a pasta 'dist' completa para os usu√°rios")
    print("4. Inclua o arquivo LEIA-ME.txt com instru√ß√µes")
    
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("- O execut√°vel pode ser detectado como falso positivo por antiv√≠rus")
    print("- Instrua os usu√°rios a executar como administrador se necess√°rio")
    print("- Teste em diferentes vers√µes do Windows antes da distribui√ß√£o")

def main():
    """Fun√ß√£o principal do script de build"""
    print("üî® YOUTUBE AUDIO EXTRACTOR - GERADOR DE EXECUT√ÅVEL")
    print("=" * 60)
    print("Este script ir√° gerar um execut√°vel Windows standalone")
    print("do YouTube Audio Extractor usando PyInstaller.")
    print("=" * 60)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists('app.py'):
        print("‚ùå ERRO: Execute este script no diret√≥rio do projeto!")
        print("   O arquivo 'app.py' deve estar presente.")
        sys.exit(1)
    
    # Executar etapas do build
    steps = [
        check_dependencies,
        clean_build_directories,
        verify_source_files,
        build_executable,
        create_installer_info,
        create_batch_launcher,
        show_final_summary
    ]
    
    for i, step in enumerate(steps, 1):
        try:
            success = step()
            if success is False:
                print(f"\n‚ùå FALHA NA ETAPA {i}")
                print("Build interrompido. Corrija os erros e tente novamente.")
                sys.exit(1)
        except Exception as e:
            print(f"\n‚ùå ERRO INESPERADO NA ETAPA {i}: {e}")
            sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üéâ BUILD FINALIZADO COM SUCESSO!")
    print("=" * 60)

if __name__ == "__main__":
    main()

